<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寄余生</title>
  <icon>https://www.gravatar.com/avatar/7d52b7565ab4fed53e476ace11ecd717</icon>
  <subtitle>寄余生的博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-03T04:50:17.013Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>寄余生</name>
    <email>chen_kang@petalmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>卷积</title>
    <link href="http://example.com/posts/e597.html"/>
    <id>http://example.com/posts/e597.html</id>
    <published>2022-02-05T00:00:00.000Z</published>
    <updated>2022-10-03T04:50:17.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卷积问题"><a href="#卷积问题" class="headerlink" title="卷积问题"></a>卷积问题</h1><p>利用卷积提高计算机视觉精度</p><h2 id="1-导入-tensorflow"><a href="#1-导入-tensorflow" class="headerlink" title="1. 导入 tensorflow"></a>1. 导入 tensorflow</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tf.__version__)</span><br></pre></td></tr></table></figure><h2 id="2-收集数据注意"><a href="#2-收集数据注意" class="headerlink" title="2. 收集数据注意"></a>2. 收集数据注意</h2><p>训练数据需要改变维度（shape）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line"><span class="comment"># 将张量training_images改变为[60000, 28, 28, 1]的四维张量</span></span><br><span class="line">training_images = training_images.reshape(<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">training_images = training_images / <span class="number">255.0</span></span><br><span class="line">test_images = test_images.reshape(<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">test_images = test_images / <span class="number">255.0</span></span><br></pre></td></tr></table></figure><h2 id="3-定义模型。"><a href="#3-定义模型。" class="headerlink" title="3. 定义模型。"></a>3. 定义模型。</h2><p>首先要添加一个卷积层。参数是：</p><ol><li>你想要生成的卷积数（过滤器数量）。这个数值是任意的，但最好是从 32 开始的倍数。</li><li>卷积的大小（过滤器的大小），在本例中为 3x3 网格。这是最常用的尺寸。</li><li>要使用的激活函数 — 在本例中，我们将使用 relu，你可能还记得它相当于当 x&gt;0 时返回 x，否则返回 0。</li><li>在第一层，设定输入数据的形状。</li></ol><p>在卷积层之后加上一个 MaxPooling 层，用来压缩图像，同时保持卷积所强调的特征内容。通过为 MaxPooling 指定(2,2)，效果是将图像的大小缩小四分之一。</p><p>最后加上一个 DNN</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="comment"># 再增加一个卷积层和MaxPooling2D</span></span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="comment"># 现在对输出进行扁平化处理。现在与非卷积版本相同的DNN结构，即全连接神经元网络。</span></span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    <span class="comment"># 含有128个神经元的全连接层，以及10个神经元的输出层。</span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="4-编译模型"><a href="#4-编译模型" class="headerlink" title="4. 编译模型"></a>4. 编译模型</h2><p>调用 model.fit 方法做训练，接着用测试集评估损失和准确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"><span class="comment"># 输出模型各层的参数状况</span></span><br><span class="line">model.summary()</span><br><span class="line">model.fit(training_images, training_labels, epochs=<span class="number">5</span>)</span><br><span class="line">test_loss = model.evaluate(test_images, test_labels)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;卷积问题&quot;&gt;&lt;a href=&quot;#卷积问题&quot; class=&quot;headerlink&quot; title=&quot;卷积问题&quot;&gt;&lt;/a&gt;卷积问题&lt;/h1&gt;&lt;p&gt;利用卷积提高计算机视觉精度&lt;/p&gt;
&lt;h2 id=&quot;1-导入-tensorflow&quot;&gt;&lt;a href=&quot;#1-导入-tens</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机视觉 - 回调函数</title>
    <link href="http://example.com/posts/551b.html"/>
    <id>http://example.com/posts/551b.html</id>
    <published>2022-02-04T12:00:00.000Z</published>
    <updated>2022-10-03T04:50:17.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>训练模型的时候，你可能会想’如果可以在达到一个期望值的时候停止训练不是很好吗？</p><p>那么如何解决这个问题？……运用回调函数！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tf.__version__)</span><br></pre></td></tr></table></figure><p>创建回调函数类，并实例化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallback</span>(tf.keras.callbacks.Callback):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_epoch_end</span>(<span class="params">self, epoch, logs=&#123;&#125;</span>):</span><br><span class="line">        <span class="keyword">if</span> logs.get(<span class="string">&#x27;loss&#x27;</span>) &lt; <span class="number">0.3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\nReached 70% accuracy so cancelling training!&quot;</span>)</span><br><span class="line">            self.model.stop_training = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">callbacks = MyCallback()</span><br></pre></td></tr></table></figure><p>载入数据和模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">training_images = training_images / <span class="number">255.0</span></span><br><span class="line">test_images = test_images / <span class="number">255.0</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">512</span>, activation=tf.nn.relu),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.softmax)</span><br><span class="line">])</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>)</span><br></pre></td></tr></table></figure><p>调用回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(training_images, training_labels, epochs=<span class="number">5</span>, callbacks=[callbacks])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回调函数&quot;&gt;&lt;a href=&quot;#回调函数&quot; class=&quot;headerlink&quot; title=&quot;回调函数&quot;&gt;&lt;/a&gt;回调函数&lt;/h1&gt;&lt;p&gt;训练模型的时候，你可能会想’如果可以在达到一个期望值的时候停止训练不是很好吗？&lt;/p&gt;
&lt;p&gt;那么如何解决这个问题？……运用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机视觉</title>
    <link href="http://example.com/posts/f5f3.html"/>
    <id>http://example.com/posts/f5f3.html</id>
    <published>2022-02-04T00:00:00.000Z</published>
    <updated>2022-10-03T04:50:17.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机视觉问题。"><a href="#计算机视觉问题。" class="headerlink" title="计算机视觉问题。"></a>计算机视觉问题。</h1><p>让计算机识别不同的服装用品（有提包、鞋子、裤子等 10 类物品）。用包含 10 种不同类型的物品图片的数据集来训练一个神经元网络，实现分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先导入TensorFlow</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tf.__version__)</span><br></pre></td></tr></table></figure><h2 id="1-构建数据集"><a href="#1-构建数据集" class="headerlink" title="1. 构建数据集"></a>1. 构建数据集</h2><p>通过 tf.keras 的 API 可以直接获得 Fashion MNIST 数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br></pre></td></tr></table></figure><p>在 mnist 对象上调用 load_data 方法会得到两个元组，各自包含两个列表。这些列表存储了服装用品的训练与测试图像数据及标签值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br></pre></td></tr></table></figure><p>打印一个训练图像，和一个训练标签来看看……用数组中不同的索引做实验。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(training_images[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(training_labels[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(training_images[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Output exceeds the size limit. Open the full output data in a text editor</span><br><span class="line">9</span><br><span class="line">[[0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.        ]</span><br><span class="line"> [0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.        ]</span><br><span class="line"> [0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.        ]</span><br><span class="line"> [0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.00392157 0.         0.         0.05098039 0.28627451 0.</span><br><span class="line">  0.         0.00392157 0.01568627 0.         0.         0.</span><br><span class="line">  0.         0.00392157 0.00392157 0.        ]</span><br><span class="line"> [0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.01176471 0.         0.14117647 0.53333333 0.49803922 0.24313725</span><br><span class="line">  0.21176471 0.         0.         0.         0.00392157 0.01176471</span><br><span class="line">...</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.         0.         0.</span><br><span class="line">  0.         0.         0.         0.        ]]</span><br></pre></td></tr></table></figure><p>把所有的值都处理成 0 和 1 之间，那就更容易得到较好的训练效果。这个过程叫做 “<strong>归一化</strong>“</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">training_images  = training_images / <span class="number">255.0</span></span><br><span class="line">test_images = test_images / <span class="number">255.0</span></span><br></pre></td></tr></table></figure><h2 id="2-建立模型"><a href="#2-建立模型" class="headerlink" title="2. 建立模型"></a>2. 建立模型</h2><p>设计 Fashion MNIST 分类模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([tf.keras.layers.Flatten(),</span><br><span class="line">                                    tf.keras.layers.Dense(<span class="number">128</span>, activation=tf.nn.relu),</span><br><span class="line">                                    tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.softmax)])**Sequential**：这定义了神经网络中的层数序列。一开始学习神经元网络总是使用序列模型。</span><br></pre></td></tr></table></figure><p><strong>Flatten</strong>：图像打印出来的时候是一个正方形，扁平化只是把这个正方形变成了一个一维的集合。把二维数组变成一维数组。</p><p><strong>Dense</strong>：增加一层神经元。每一层神经元都需要一个<strong>激活函数 activation</strong>来告诉它们输出什么。有很多选项，但目前只用这些（relu 和 softmax）。</p><p><strong>Relu</strong>：的意思是 “如果 X&gt;0 返回 X，否则返回 0”—所以它的作用是它只把大于 0 的值传递给网络中的下一层，小于 0 的也当作 0。</p><p><strong>Softmax</strong>: 激活函数接收到一组值后，选择其中最大的一个输出。例如，上一层的输出为[0.1, 0.1, 0.05, 0.1, 9.5, 0.1, 0.05, 0.05, 0.05]，Softmax 就省去了你在其中寻找最大的值，并把它变成[0,0,0,0,0,1,0,0,0,0,0] <strong>Softmax</strong>的意思是 “如果 X&gt;0，则返回 X，否则返回 0” —所以它的作用是只把 0 或更大的值传给下一层的网络。—其目的是节省大量的编码！</p><h2 id="3-训练"><a href="#3-训练" class="headerlink" title="3. 训练"></a>3. 训练</h2><p>现在模型已经定义好了，下一步要做的事情就是实际建立它。可以用优化器和损失函数编译它—然后通过调用<em>model.fit</em>来训练它，让它将训练数据与标签拟合—即让模型找出训练数据和标签之间的关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.optimizers.Adam(),</span><br><span class="line">              loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>,</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(training_images, training_labels, epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1875/1875 [==============================] - 6s 3ms/step - loss: 0.4991 - accuracy: 0.8248</span><br><span class="line">Epoch 2/5</span><br><span class="line">1875/1875 [==============================] - 4s 2ms/step - loss: 0.3750 - accuracy: 0.8643</span><br><span class="line">Epoch 3/5</span><br><span class="line">1875/1875 [==============================] - 5s 2ms/step - loss: 0.3381 - accuracy: 0.8767</span><br><span class="line">Epoch 4/5</span><br><span class="line">1875/1875 [==============================] - 5s 3ms/step - loss: 0.3132 - accuracy: 0.8838</span><br><span class="line">Epoch 5/5</span><br><span class="line">1875/1875 [==============================] - 5s 3ms/step - loss: 0.2954 - accuracy: 0.8905</span><br></pre></td></tr></table></figure><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><p>调用 model.evaluation，并将用于测试的图像和标签数据传入，它会报告测试数据的损失。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.evaluate(test_images, test_labels)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">313/313 [==============================] - 1s 2ms/step - loss: 0.3876 - accuracy: 0.8608</span><br></pre></td></tr></table></figure><p>最后用测试集看看效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预测</span></span><br><span class="line">classifications = model.predict(test_images)</span><br><span class="line"><span class="built_in">print</span>(classifications[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(test_labels[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[3.4371383e-06 3.7975145e-08 3.7434580e-07 9.0723393e-09 7.4082027e-07</span><br><span class="line"> 2.0963052e-02 1.8693145e-05 1.1022979e-01 4.8193921e-05 8.6873573e-01]</span><br><span class="line">9</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机视觉问题。&quot;&gt;&lt;a href=&quot;#计算机视觉问题。&quot; class=&quot;headerlink&quot; title=&quot;计算机视觉问题。&quot;&gt;&lt;/a&gt;计算机视觉问题。&lt;/h1&gt;&lt;p&gt;让计算机识别不同的服装用品（有提包、鞋子、裤子等 10 类物品）。用包含 10 种不同类型的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://example.com/posts/5317.html"/>
    <id>http://example.com/posts/5317.html</id>
    <published>2022-01-05T00:00:00.000Z</published>
    <updated>2022-10-03T04:50:17.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Hexo-搭建个人博客"><a href="#使用-Hexo-搭建个人博客" class="headerlink" title="使用 Hexo 搭建个人博客"></a>使用 Hexo 搭建个人博客</h1><h2 id="1-什么是-Hexo"><a href="#1-什么是-Hexo" class="headerlink" title="1. 什么是 Hexo"></a>1. 什么是 Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>这是 Hexo 的官网 <a href="https://hexo.io/zh-cn/">Hexo</a></p><h2 id="2-准备安装环境"><a href="#2-准备安装环境" class="headerlink" title="2. 准备安装环境"></a>2. 准备安装环境</h2><h3 id="1-安装-node-js"><a href="#1-安装-node-js" class="headerlink" title="1. 安装 node.js"></a>1. 安装 node.js</h3><p>进入 node.js 官网：<a href="https://nodejs.org/en/download/">Node.js 官网</a></p><p>按照自己的机器选择对应的版本下载，我是 windous 64 位</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png" style="width:800px;"/></div></div><p>不会就一直下一步 hhh~</p><p>具体可以参考<a href="https://www.cnblogs.com/pengpengdeyuan/p/14434559.html">Node.js 安装教程</a></p><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h3><p>这是 Git 官网：<a href="https://git-scm.com/downloads">Git 官网</a></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png" style="width:800px;"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png" style="width:800px;"/></div></div><p>一般也是下载好自己对应的版本后一直下一步就好了</p><p>Git 的安装请参考：<a href="https://www.cnblogs.com/jytx/p/5602927.html">Git 安装教程</a></p><p>要学习 Git 也可访问：<a href="http://git.oschina.net/progit/">Pro Git 中文版</a></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png" style="width:800px;"/></div></div><h2 id="3-检验软件是否安装成功"><a href="#3-检验软件是否安装成功" class="headerlink" title="3. 检验软件是否安装成功"></a>3. 检验软件是否安装成功</h2><p>同时按下 Win 键和 R 键打开运行窗口,输入 <code>cmd</code> ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png" style="width:800px;"/></div></div><p>此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 <code>Git GUI Here</code> 和 <code>Git Bash Here</code>两个选项，第一个是<code>图形界面的Git操作</code>，另一个<code>是命令行</code>，我们一般使用第二个：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png" style="width:200px;"/></div></div><h2 id="4-Hexo-的安装"><a href="#4-Hexo-的安装" class="headerlink" title="4. Hexo 的安装"></a>4. Hexo 的安装</h2><p>选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：F\QiQi_Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>这个命令表示安装 hexo 的脚手架，如图所示即为安装成功。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/7.png" style="width:800px;"/></div></div><h2 id="5-Hexo-的初始化配置"><a href="#5-Hexo-的初始化配置" class="headerlink" title="5. Hexo 的初始化配置"></a>5. Hexo 的初始化配置</h2><p>第一个命令为 Hexo 初始化，第二个命令表示安装 hexo 部署到 git page 的 deployer。</p><p>成功之后如图所示</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8.png" style="width:800px;"/></div></div><p>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/9.png" style="width:800px;"/></div></div><h2 id="6-本地查看效果"><a href="#6-本地查看效果" class="headerlink" title="6. 本地查看效果"></a>6. 本地查看效果</h2><p>执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>执行完即可登录 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果</p><p>显示以下信息说明操作成功：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/10.png" style="width:800px;"/></div></div><p>登录 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://jiyusheng.oss-cn-zhangjiakou.aliyuncs.com/img_for_blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/11.png" style="width:800px;"/></div></div><p>至此一个简单的个人博客就搭建好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-Hexo-搭建个人博客&quot;&gt;&lt;a href=&quot;#使用-Hexo-搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;使用 Hexo 搭建个人博客&quot;&gt;&lt;/a&gt;使用 Hexo 搭建个人博客&lt;/h1&gt;&lt;h2 id=&quot;1-什么是-Hexo&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
</feed>
